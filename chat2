–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –¥–∞, –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π backend, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É huggingface_hub, –ø—Ä–∏ —ç—Ç–æ–º:

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∏ –∫–ª–∞—Å—Å—ã Hugging Face,

–ù–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–¥–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ,

–ê –¥–ª—è gpustack –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π huggingface.co —Å–µ—Ä–≤–µ—Ä.

üéØ –ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º

–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É huggingface_hub –¥–ª—è:

–ß—Ç–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π (HfApi, ModelInfo),

–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (—ç–º—É–ª–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ whoami),

–†–∞–∑–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ hf_hub_download, –Ω–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º.

–û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ (HF_HOME) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

–ü–æ—Å—Ç—Ä–æ–∏–º FastAPI-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–∏ API –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.

üß± –ü—Ä–∏–º–µ—Ä backend'–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ huggingface_hub
from fastapi import FastAPI, Response
from fastapi.responses import FileResponse, JSONResponse
from huggingface_hub import HfApi, HfFolder, hf_hub_download, ModelCard
import os
import json

app = FastAPI(title="Local Hugging Face Server (via huggingface_hub)")

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∑–µ—Ä–∫–∞–ª—É (–≥–¥–µ —É–∂–µ –ª–µ–∂–∞—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏)
LOCAL_HF_DIR = os.environ.get("HF_HOME", "./hf_cache")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –µ—Å–ª–∏ –≤—Å—ë –ª–æ–∫–∞–ª—å–Ω–æ)
api = HfApi(endpoint="https://huggingface.co")  # endpoint –Ω—É–∂–µ–Ω –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –Ω–æ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å


@app.get("/api/models")
async def list_models():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ HF_HOME.
    """
    models_root = os.path.join(LOCAL_HF_DIR, "models--")
    models = []

    if not os.path.exists(models_root):
        return JSONResponse({"models": []})

    for d in os.listdir(models_root):
        model_dir = os.path.join(models_root, d)
        if not os.path.isdir(model_dir):
            continue
        name = d.replace("models--", "").replace("--", "/")
        size = 0
        file_count = 0
        for root, _, files in os.walk(model_dir):
            for f in files:
                fp = os.path.join(root, f)
                size += os.path.getsize(fp)
                file_count += 1
        models.append({
            "model_id": name,
            "file_count": file_count,
            "total_size_mb": round(size / (1024 * 1024), 2)
        })

    return JSONResponse({"models": models})


@app.get("/{user}/{model_name}/check-auth")
async def check_auth(user: str, model_name: str):
    """
    –≠–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ huggingface_hub (–≤—Å–µ–≥–¥–∞ True)
    """
    token = HfFolder.get_token()
    return JSONResponse({
        "ok": True,
        "authenticated": bool(token),
        "user": user,
        "model": model_name,
        "token_present": bool(token)
    })


@app.get("/{user}/{model_name}/resolve/{revision}/{file_path:path}")
async def resolve_file(user: str, model_name: str, revision: str, file_path: str):
    """
    –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HF_HOME.
    """
    repo_id = f"{user}/{model_name}"
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ
        local_path = hf_hub_download(
            repo_id=repo_id,
            filename=file_path,
            revision=revision,
            local_files_only=True,  # –ù–µ —Ç—è–Ω–µ–º –∏–∑ —Å–µ—Ç–∏
            cache_dir=LOCAL_HF_DIR
        )
        return FileResponse(local_path)
    except Exception as e:
        return Response(status_code=404, content=f"File not found locally: {file_path}\n{str(e)}")


@app.get("/{user}/{model_name}")
async def model_info(user: str, model_name: str):
    """
    –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ (—á–µ—Ä–µ–∑ huggingface_hub)
    """
    repo_id = f"{user}/{model_name}"
    model_dir = os.path.join(LOCAL_HF_DIR, f"models--{user}--{model_name}")

    if not os.path.exists(model_dir):
        return Response(status_code=404, content="Model not found in local cache")

    files = []
    for root, _, filenames in os.walk(model_dir):
        for f in filenames:
            rel_path = os.path.relpath(os.path.join(root, f), model_dir)
            files.append({
                "rfilename": rel_path,
                "lfs": {"size": os.path.getsize(os.path.join(root, f))}
            })

    return JSONResponse({
        "modelId": repo_id,
        "sha": "local",
        "siblings": files,
    })

üì¶ requirements.txt
fastapi
uvicorn
huggingface_hub>=0.23.0

üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

pip install -r requirements.txt


–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É Hugging Face (–≥–¥–µ –ª–µ–∂–∞—Ç –º–æ–¥–µ–ª–∏):

export HF_HOME=/data/hf_cache


–ó–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä:

uvicorn app:app --host 0.0.0.0 --port 8000


–ù–∞—Å—Ç—Ä–æ–π gpustack:

export HF_ENDPOINT=http://192.168.1.100:8000

üß© –ö–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

–ú–æ–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ —Å–∫–∞—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—à–∏–Ω—ã:

from huggingface_hub import hf_hub_download

hf_hub_download("TheBloke/Llama-2-7B-GGUF", filename="config.json")
hf_hub_download("TheBloke/Llama-2-7B-GGUF", filename="model.safetensors")


–ü–æ—Ç–æ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ~/.cache/huggingface/hub (–∏–ª–∏ HF_HOME) –Ω–∞ –æ—Ñ–ª–∞–π–Ω-—Å–µ—Ä–≤–µ—Ä –≤ ./hf_cache.
